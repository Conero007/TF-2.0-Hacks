{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.0.0\n"
     ]
    }
   ],
   "source": [
    "# Checks and setup\n",
    "import tensorflow as tf\n",
    "import os\n",
    "\n",
    "print(tf.__version__)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Eager execution\n",
    "\n",
    "Since eager execution is enabled by default in TensorFlow 2.0 you _do not_ need to do anything to enable it. However, you can disable it by executing the following:\n",
    "\n",
    "```python\n",
    "import tensorflow as tf\n",
    "\n",
    "tf.compat.v1.disable_eager_execution()\n",
    "```\n",
    "\n",
    "If you want to know whether eager execution is enabled or not just execute `tf.executing_eagerly()`. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## GradientTape\n",
    "\n",
    "## Part I"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tf.Tensor(\n",
      "[[ 0.33007067 -0.77728546]\n",
      " [-0.6945773   0.33875927]], shape=(2, 2), dtype=float32)\n"
     ]
    }
   ],
   "source": [
    "a = tf.Variable(tf.random.normal(shape=(2, 2)))\n",
    "b = tf.random.normal(shape=(2, 2))\n",
    "\n",
    "with tf.GradientTape() as tape:\n",
    "    c = tf.sqrt(tf.square(a) + tf.square(b))  \n",
    "    # Gradient of `c` w.r.t `a`\n",
    "    dc_da = tape.gradient(c, a)\n",
    "    print(dc_da)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Part II"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Imports\n",
    "from sklearn.datasets.samples_generator import make_blobs\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((100, 2), (100,))"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Generate some data\n",
    "X, y = make_blobs(n_samples=100, centers=2, n_features=2,\n",
    "                  random_state=666)\n",
    "\n",
    "X.shape, y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[2.34769665, 3.84737956],\n",
       "        [2.25211721, 7.72836548],\n",
       "        [4.20334204, 8.19437057],\n",
       "        [4.56840252, 5.00758839],\n",
       "        [5.14209854, 8.60577994],\n",
       "        [5.3476516 , 4.49482029],\n",
       "        [0.77015549, 4.84023746],\n",
       "        [3.93882207, 7.52922765],\n",
       "        [4.41391444, 2.56506757],\n",
       "        [3.40315224, 8.62298395]]), array([1, 0, 0, 1, 0, 1, 1, 0, 1, 0]))"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X[:10], y[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the data\n",
    "plt.scatter(X[:, 0], X[:, 1], c=y.reshape((100,1))[:, 0])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define a model to fit the above data\n",
    "model = tf.keras.Sequential([\n",
    "    tf.keras.layers.Dropout(rate=0.2, input_shape=X.shape[1:]),\n",
    "    tf.keras.layers.Dense(units=64, activation='relu'),\n",
    "    tf.keras.layers.Dropout(rate=0.2),\n",
    "    tf.keras.layers.Dense(units=1, activation='sigmoid')\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define loss and optimizer\n",
    "loss_func = tf.keras.losses.BinaryCrossentropy()\n",
    "optimizer = tf.keras.optimizers.Adam()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "@tf.function\n",
    "def train_loop(features, labels):\n",
    "    # Define the GradientTape context\n",
    "    with tf.GradientTape() as tape:\n",
    "        # Get the probabilities\n",
    "        predictions = model(features)\n",
    "        # Calculate the loss\n",
    "        loss = loss_func(labels, predictions)\n",
    "    # Get the gradients\n",
    "    gradients = tape.gradient(loss, model.trainable_variables)\n",
    "    # Update the weights\n",
    "    optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n",
    "    return loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Shuffle the data\n",
    "indices = np.random.permutation(len(X))\n",
    "features = X[indices]\n",
    "labels = y[indices]\n",
    "\n",
    "# Create batches of data\n",
    "dataset = tf.data.Dataset.from_tensor_slices((features, labels))\n",
    "dataset = dataset.shuffle(buffer_size=1024).batch(16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train the model\n",
    "def train_model():\n",
    "    start = time.time()\n",
    "    for epoch in range(10):\n",
    "        for step, (x, y) in enumerate(dataset):\n",
    "            loss = train_loop(x, y)\n",
    "            print('Epoch %d: last batch loss = %.4f' % (epoch, float(loss)))\n",
    "    print(\"It took {} seconds\".format(time.time() - start))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0: last batch loss = 0.4245\n",
      "Epoch 0: last batch loss = 0.5588\n",
      "Epoch 0: last batch loss = 0.5464\n",
      "Epoch 0: last batch loss = 0.5122\n",
      "Epoch 0: last batch loss = 0.2704\n",
      "Epoch 0: last batch loss = 0.7035\n",
      "Epoch 0: last batch loss = 0.4122\n",
      "Epoch 1: last batch loss = 0.4880\n",
      "Epoch 1: last batch loss = 0.4262\n",
      "Epoch 1: last batch loss = 0.3047\n",
      "Epoch 1: last batch loss = 0.6260\n",
      "Epoch 1: last batch loss = 0.6066\n",
      "Epoch 1: last batch loss = 0.5124\n",
      "Epoch 1: last batch loss = 0.4585\n",
      "Epoch 2: last batch loss = 0.5912\n",
      "Epoch 2: last batch loss = 0.4545\n",
      "Epoch 2: last batch loss = 0.5036\n",
      "Epoch 2: last batch loss = 0.3432\n",
      "Epoch 2: last batch loss = 0.5620\n",
      "Epoch 2: last batch loss = 0.4983\n",
      "Epoch 2: last batch loss = 0.4510\n",
      "Epoch 3: last batch loss = 0.3836\n",
      "Epoch 3: last batch loss = 0.4602\n",
      "Epoch 3: last batch loss = 0.4740\n",
      "Epoch 3: last batch loss = 0.4250\n",
      "Epoch 3: last batch loss = 0.4719\n",
      "Epoch 3: last batch loss = 0.6119\n",
      "Epoch 3: last batch loss = 0.9070\n",
      "Epoch 4: last batch loss = 0.4032\n",
      "Epoch 4: last batch loss = 0.4100\n",
      "Epoch 4: last batch loss = 0.4532\n",
      "Epoch 4: last batch loss = 0.5532\n",
      "Epoch 4: last batch loss = 0.6243\n",
      "Epoch 4: last batch loss = 0.5297\n",
      "Epoch 4: last batch loss = 0.2422\n",
      "Epoch 5: last batch loss = 0.4146\n",
      "Epoch 5: last batch loss = 0.5389\n",
      "Epoch 5: last batch loss = 0.4081\n",
      "Epoch 5: last batch loss = 0.5668\n",
      "Epoch 5: last batch loss = 0.4876\n",
      "Epoch 5: last batch loss = 0.4644\n",
      "Epoch 5: last batch loss = 0.6039\n",
      "Epoch 6: last batch loss = 0.4035\n",
      "Epoch 6: last batch loss = 0.5507\n",
      "Epoch 6: last batch loss = 0.4447\n",
      "Epoch 6: last batch loss = 0.5176\n",
      "Epoch 6: last batch loss = 0.3539\n",
      "Epoch 6: last batch loss = 0.6269\n",
      "Epoch 6: last batch loss = 0.4420\n",
      "Epoch 7: last batch loss = 0.6123\n",
      "Epoch 7: last batch loss = 0.3858\n",
      "Epoch 7: last batch loss = 0.4137\n",
      "Epoch 7: last batch loss = 0.4674\n",
      "Epoch 7: last batch loss = 0.5650\n",
      "Epoch 7: last batch loss = 0.5407\n",
      "Epoch 7: last batch loss = 0.1414\n",
      "Epoch 8: last batch loss = 0.5144\n",
      "Epoch 8: last batch loss = 0.4559\n",
      "Epoch 8: last batch loss = 0.4964\n",
      "Epoch 8: last batch loss = 0.5223\n",
      "Epoch 8: last batch loss = 0.3484\n",
      "Epoch 8: last batch loss = 0.4771\n",
      "Epoch 8: last batch loss = 0.7436\n",
      "Epoch 9: last batch loss = 0.3736\n",
      "Epoch 9: last batch loss = 0.5078\n",
      "Epoch 9: last batch loss = 0.6646\n",
      "Epoch 9: last batch loss = 0.4017\n",
      "Epoch 9: last batch loss = 0.4865\n",
      "Epoch 9: last batch loss = 0.4072\n",
      "Epoch 9: last batch loss = 0.5890\n",
      "It took 0.5460958480834961 seconds\n"
     ]
    }
   ],
   "source": [
    "train_model()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Without `tf.function`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_loop(features, labels):\n",
    "    # Define the GradientTape context\n",
    "    with tf.GradientTape() as tape:\n",
    "        # Get the probabilities\n",
    "        predictions = model(features)\n",
    "        # Calculate the loss\n",
    "        loss = loss_func(labels, predictions)\n",
    "    # Get the gradients\n",
    "    gradients = tape.gradient(loss, model.trainable_variables)\n",
    "    # Update the weights\n",
    "    optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n",
    "    return loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0: last batch loss = 0.3471\n",
      "Epoch 0: last batch loss = 0.5325\n",
      "Epoch 0: last batch loss = 0.5341\n",
      "Epoch 0: last batch loss = 0.3562\n",
      "Epoch 0: last batch loss = 0.5736\n",
      "Epoch 0: last batch loss = 0.4617\n",
      "Epoch 0: last batch loss = 0.2335\n",
      "Epoch 1: last batch loss = 0.7062\n",
      "Epoch 1: last batch loss = 0.3810\n",
      "Epoch 1: last batch loss = 0.3605\n",
      "Epoch 1: last batch loss = 0.3965\n",
      "Epoch 1: last batch loss = 0.5082\n",
      "Epoch 1: last batch loss = 0.3976\n",
      "Epoch 1: last batch loss = 0.4034\n",
      "Epoch 2: last batch loss = 0.4369\n",
      "Epoch 2: last batch loss = 0.3630\n",
      "Epoch 2: last batch loss = 0.3288\n",
      "Epoch 2: last batch loss = 0.4827\n",
      "Epoch 2: last batch loss = 0.4300\n",
      "Epoch 2: last batch loss = 0.6561\n",
      "Epoch 2: last batch loss = 0.5266\n",
      "Epoch 3: last batch loss = 0.4533\n",
      "Epoch 3: last batch loss = 0.5452\n",
      "Epoch 3: last batch loss = 0.5470\n",
      "Epoch 3: last batch loss = 0.4275\n",
      "Epoch 3: last batch loss = 0.4335\n",
      "Epoch 3: last batch loss = 0.3395\n",
      "Epoch 3: last batch loss = 0.3140\n",
      "Epoch 4: last batch loss = 0.4166\n",
      "Epoch 4: last batch loss = 0.4051\n",
      "Epoch 4: last batch loss = 0.6166\n",
      "Epoch 4: last batch loss = 0.3823\n",
      "Epoch 4: last batch loss = 0.4148\n",
      "Epoch 4: last batch loss = 0.4449\n",
      "Epoch 4: last batch loss = 0.5397\n",
      "Epoch 5: last batch loss = 0.4184\n",
      "Epoch 5: last batch loss = 0.4262\n",
      "Epoch 5: last batch loss = 0.5606\n",
      "Epoch 5: last batch loss = 0.4023\n",
      "Epoch 5: last batch loss = 0.3803\n",
      "Epoch 5: last batch loss = 0.5134\n",
      "Epoch 5: last batch loss = 0.3824\n",
      "Epoch 6: last batch loss = 0.3660\n",
      "Epoch 6: last batch loss = 0.4343\n",
      "Epoch 6: last batch loss = 0.2085\n",
      "Epoch 6: last batch loss = 0.6016\n",
      "Epoch 6: last batch loss = 0.4985\n",
      "Epoch 6: last batch loss = 0.5143\n",
      "Epoch 6: last batch loss = 0.5807\n",
      "Epoch 7: last batch loss = 0.4216\n",
      "Epoch 7: last batch loss = 0.3371\n",
      "Epoch 7: last batch loss = 0.4401\n",
      "Epoch 7: last batch loss = 0.4651\n",
      "Epoch 7: last batch loss = 0.5118\n",
      "Epoch 7: last batch loss = 0.5006\n",
      "Epoch 7: last batch loss = 0.3528\n",
      "Epoch 8: last batch loss = 0.3184\n",
      "Epoch 8: last batch loss = 0.4373\n",
      "Epoch 8: last batch loss = 0.3626\n",
      "Epoch 8: last batch loss = 0.4279\n",
      "Epoch 8: last batch loss = 0.5119\n",
      "Epoch 8: last batch loss = 0.6482\n",
      "Epoch 8: last batch loss = 0.2814\n",
      "Epoch 9: last batch loss = 0.3977\n",
      "Epoch 9: last batch loss = 0.4096\n",
      "Epoch 9: last batch loss = 0.6218\n",
      "Epoch 9: last batch loss = 0.4536\n",
      "Epoch 9: last batch loss = 0.3742\n",
      "Epoch 9: last batch loss = 0.3666\n",
      "Epoch 9: last batch loss = 0.5175\n",
      "It took 0.610914945602417 seconds\n"
     ]
    }
   ],
   "source": [
    "train_model()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Slower!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model subclassing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "class LeNet(tf.keras.Model):\n",
    "    def __init__(self):\n",
    "        super(LeNet, self).__init__()\n",
    "        self.conv2d_1 = tf.keras.layers.Conv2D(filters=6, \n",
    "                           kernel_size=(3, 3), activation='relu', \n",
    "                           input_shape=(32,32,1))\n",
    "        self.average_pool = tf.keras.layers.AveragePooling2D()\n",
    "        self.conv2d_2 = tf.keras.layers.Conv2D(filters=16, \n",
    "                           kernel_size=(3, 3), activation='relu')\n",
    "        self.flatten = tf.keras.layers.Flatten()\n",
    "        self.fc_1 = tf.keras.layers.Dense(120, activation='relu')\n",
    "        self.fc_2 = tf.keras.layers.Dense(84, activation='relu')\n",
    "        self.out = tf.keras.layers.Dense(10, activation='softmax')\n",
    "        \n",
    "    def call(self, input):\n",
    "        x = self.conv2d_1(input)\n",
    "        x = self.average_pool(x)\n",
    "        x = self.conv2d_2(x)\n",
    "        x = self.average_pool(x)\n",
    "        x = self.flatten(x)\n",
    "        x = self.fc_2(self.fc_1(x))\n",
    "        return self.out(x)\n",
    "    \n",
    "lenet = LeNet()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Distributed training\n",
    "\n",
    "Currently, for `tf.keras` [MirroredStrategy](https://www.tensorflow.org/guide/distributed_training#mirroredstrategy) works the best (reference: https://www.tensorflow.org/guide/distributed_training#types_of_strategies). We first need to define the strategy with which we want to train our model:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: Logging before flag parsing goes to stderr.\n",
      "W1015 07:05:51.357568 4592326080 cross_device_ops.py:1209] There is non-GPU devices in `tf.distribute.Strategy`, not using nccl allreduce.\n"
     ]
    }
   ],
   "source": [
    "strategy = tf.distribute.MirroredStrategy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of devices: 1\n"
     ]
    }
   ],
   "source": [
    "# Since I don't have multiple GPUs :P\n",
    "print('Number of devices: {}'.format(strategy.num_replicas_in_sync))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Call the distribution scope context manager\n",
    "with strategy.scope():\n",
    "    # Define a model to fit the above data\n",
    "    model = tf.keras.Sequential([\n",
    "        tf.keras.layers.Dropout(rate=0.2, input_shape=X.shape[1:]),\n",
    "        tf.keras.layers.Dense(units=64, activation='relu'),\n",
    "        tf.keras.layers.Dropout(rate=0.2),\n",
    "        tf.keras.layers.Dense(units=1, activation='sigmoid')\n",
    "    ])\n",
    "    \n",
    "    # Compile the model\n",
    "    model.compile(loss='binary_crossentropy',\n",
    "                optimizer='adam',\n",
    "                metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 100 samples\n",
      "Epoch 1/5\n",
      "100/100 [==============================] - 3s 29ms/sample - loss: 0.7461 - accuracy: 0.4600\n",
      "Epoch 2/5\n",
      "100/100 [==============================] - 0s 169us/sample - loss: 0.6467 - accuracy: 0.6000\n",
      "Epoch 3/5\n",
      "100/100 [==============================] - 0s 143us/sample - loss: 0.7090 - accuracy: 0.5400\n",
      "Epoch 4/5\n",
      "100/100 [==============================] - 0s 131us/sample - loss: 0.6844 - accuracy: 0.5700\n",
      "Epoch 5/5\n",
      "100/100 [==============================] - 0s 176us/sample - loss: 0.7161 - accuracy: 0.5200\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x134fd5550>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Train the model\n",
    "model.fit(X, y, epochs=5)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
